[{"title":"Demo练习","date":"2017-04-25T04:46:36.000Z","path":"2017/04/25/Demo练习/","text":"用户评论功能 用户可以发表评论，使用React组件化 在github上还有功能扩展，从后台读取数据，渲染到列表下方 用户输入的实时评论也可以写入后台服务器 Demo地址：查看Demo地址","tags":[]},{"title":"React表单组件","date":"2017-04-25T04:45:55.000Z","path":"2017/04/25/React表单组件/","text":"1、像是input、textarea、option这样的表单组件不同于其他组件，因为他们可以通过用户交互发生变化。这些组件提供的界面使响应用户交互的表单数据处理更加容易。2、交互属性表单组件支持几个受用户交互影响的属性value，用于input、textarea组件；checked，用于类型为checkbox或者radio的input组件；selected，用于option组件。在HTML中，textarea的值通过子节点设置，在React中则应该使用value代替。表单组件可以通过onChange会调函数来监听组件变化。当用户做出以下交互时，onChange执行并通过浏览器做出响应： input 或 textarea 的 value 发生变化时。 input 的 checked 状态改变时。 option 的 selected 状态改变时。 和所有的DOM事件一样，所有的HTML原生组件都支持onChange属性，而且可以用来监听冒泡的change事件。","tags":[]},{"title":"React组件生命周期","date":"2017-04-25T04:45:09.000Z","path":"2017/04/25/React组件生命周期/","text":"React 组件生命周期React组件的生命周期可分成三个状态： Mounting：已插入真实 DOMUpdating：正在被重新渲染Unmounting：已移出真实 DOM componentWillMount 在渲染前调用,在客户端也在服务端。 componentDidMount 在第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构，可以通过this.getDOMNode()来进行访问。 如果你想和其他JavaScript框架一起使用，可以在这个方法中调用setTimeout, setInterval或者发送AJAX请求等操作(防止异部操作阻塞UI)。 componentWillReceiveProps 在组件接收到一个新的prop时被调用。这个方法在初始化render时不会被调用。 shouldComponentUpdate 返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用。可以在你确认不需要更新组件时使用。 componentWillUpdate 在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用。 componentDidUpdate 在组件完成更新后立即调用。在初始化时不会被调用。 componentWillUnmount 在组件从 DOM 中移除的时候立刻被调用。 总结生命周期的回调函数 生命周期 调用次数 能否使用setSate() getDefaultProps 1(全局调用一次) 否 getInitialState 1 否 componentWillMount 1 是 render &gt;=1 否 componentDidMount 1 是 componentWillReceiveProps &gt;=0 是 shouldComponentUpdate &gt;=0 否 componentWillUpdate &gt;=0 否 componentDidUpdate &gt;=0 否 componentWillUnmount 1 否","tags":[]},{"title":"React历程","date":"2017-04-25T04:44:08.000Z","path":"2017/04/25/React历程/","text":"React介绍1、React 是一个用于构建用户界面的 JAVASCRIPT 库。2、React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。3、React 起源于 Facebook 的内部项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。4、React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。 React的特点1、声明式设计 −React采用声明范式，可以轻松描述应用。2、高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。3、灵活 −React可以与已知的库或框架很好地配合。4、JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。5、组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。6、单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。 React组件API1、SetState:设置状态2、replaceState:替换状态3、setProps:设置属性4、replaceProps:替换属性5、forceUpdate:强制更新6、findDomNode:获取DOM节点7、isMounted:判断组件挂载状态 Tip 原生HTML元素名以小写字母开头，而自定义的React类名以大写字母开头，还需注意组件类只能包含一个顶层标签。 React只需更新组件的state,然后根据新的state重新渲染用户界面。","tags":[]},{"title":"Hello World","date":"2017-04-25T04:14:18.428Z","path":"2017/04/25/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]